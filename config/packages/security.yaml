security:  
    password_hashers:
        # Our user class and the algorithm we'll use to encode passwords
        # 'auto' means to let Symfony choose the best possible password hasher (Argon2 or Bcrypt)
        # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    providers:
        # # # https://symfony.com/doc/current/security/user_provider.html
        # # # In this example, users are stored via Doctrine in the database
        # # # To see the users at src/App/DataFixtures/ORM/LoadFixtures.php
        # # # To load users from somewhere else: https://symfony.com/doc/current/security/user_provider.html#creating-a-custom-user-provider
        # database_users:
        #     entity: { class: App\Entity\User, property: email }
        # # # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
        # used to reload user from session & other features (e.g. switch_user)

    # https://symfony.com/doc/current/security.html#a-authentication-firewalls
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        login: 
            pattern: ^/login
            stateless: true
            provider: app_user_provider
            json_login:
                username_path: email
                password_path: password
                check_path: /login
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        api:
            pattern: ^/api
            stateless: true
            jwt: ~
        # main:
        #     # this firewall does not have a 'pattern' option because it applies to all URLs
        #     lazy: true
        #     provider: app_user_provider

    access_control:
        # this is a catch-all for the admin area
        # additional security lives in the controllers
        
        - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }

    # role_hierarchy:
    #     ROLE_ADMIN: ROLE_USER

# when@test:
#     # this configuration simplifies testing URLs protected by the security mechanism
#     # See https://symfony.com/doc/current/testing/http_authentication.html
#     security:
#         firewalls:
#             main:
#                 http_basic: ~
